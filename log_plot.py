import argparse
import networkx as nx
import matplotlib.pyplot as plt
import os
from pynput import keyboard
from pynput.keyboard import Key

print("Interactive Program to analyze / visualize the logs generated by the algorithm")
print("Use Up/Down arrow keys to navigate between the explored graphs!")
print()

parser = argparse.ArgumentParser(description='Input Log file path')
parser.add_argument('-l', '--log-file', help='Path to log file', required=True)
parser.add_argument(
    '-o', '--output-image', help='Path to output png file', required=True)
args = parser.parse_args()
logPath = args.log_file
outputPath = args.output_image

if not os.path.exists(logPath):
    assert False, f"Log file {logPath} does not exist!"

k = None
actions = []
with open(logPath, 'r') as file:
    commands = file.readlines()
    assert commands[0][0] == 'k', "First line of logs must be Pk-free k value"
    assert commands[-1].split()[0] == 'time', "Last line of logs must be time taken"
    k = int(commands[0].split('=')[1])
    commands = [command.strip() for command in commands[1:-1]]
    for i, command in enumerate(commands):
        assert command[0].lower() in ['n', 'e'], \
            f"Error parsing log (line {i+2}): {command}"
        action = command.split()
        if len(action) == 2:
            actions.append((action[0], int(action[1]), None))
        elif len(action) == 3:
            actions.append((action[0], int(action[1]), int(action[2])))
        else:
            assert False, f"Error parsing log (line {i+2}): {command}"

assert actions, "Could not read log file!"

root = nx.Graph()
plt.clf()
plt.figure(figsize=(10, 10))
nx.draw(root, with_labels=True)
plt.savefig(outputPath)

currGraphs = []


def handleKeyRelease(key):
    global actionIndex, currGraphs
    if key == Key.esc:
        return False
    if key not in [Key.up, Key.down]:
        return

    if len(currGraphs) == 0 and key == Key.down:
        return
    if len(currGraphs) == len(actions) and key == Key.up:
        return

    if key == Key.up:
        displayGraph = currGraphs[-1].copy() if currGraphs else root.copy()
        targetAction = actions[len(currGraphs)]
        action, id1, id2 = targetAction
        if action == 'N':
            displayGraph.add_node(id1)
        elif action == 'n':
            displayGraph.remove_node(id1)
        elif action == 'E':
            displayGraph.add_edge(id1, id2)
        elif action == 'e':
            displayGraph.remove_edge(id1, id2)
        currGraphs.append(displayGraph)
    elif key == Key.down:
        currGraphs.pop()
        displayGraph = currGraphs[-1] if currGraphs else root

    plt.clf()
    positions = nx.circular_layout(displayGraph.subgraph(set(displayGraph)))
    nx.draw(displayGraph, with_labels=True, pos=positions)
    plt.savefig(outputPath)


if __name__ == "__main__":
    with keyboard.Listener(on_release=handleKeyRelease) as listener:
        listener.join()
